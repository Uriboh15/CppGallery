<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="CppGallery.Pages.Columns.Column20.Column20Page"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CppGallery.Pages.UserControls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../../UserControls/ColumnsDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    <ScrollViewer>
        <local:ColumnOuterPanel>
            <local:ColumnContentPanel>
                <TextBlock Text="WinUI 3 でタイトルバーをカスタマイズする" Style="{StaticResource ColumnTitle}" />
                <TextBlock>
                    Windows App SDK 1.2 で今までは Windows 11 環境でしか使えなかったタイトルバーの全面的なカスタマイズ (キャプションボタンが小さくならないほう) が Windows 10 でサポートされるようになったので、早速タイトルバーをカスタマイズしてみる。
                </TextBlock>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock Text="クライアント領域をタイトルバー部分まで拡張する" Style="{StaticResource ColumnSubTitle}" />
                <TextBlock>
                    C++ コードで AppWindow.TitleBar の ExtendsContentIntoTitleBar を true にすると、クライアント領域をタイトルバー部分まで拡張することができる。
                    ただし、拡張したタイトルバー部分にコントロールを置いてもそのままではユーザーは操作できない。
                    タイトルバー部分にあるコントロールを触れるようにするには追加のコードが必要になるのだが、ここでは割愛する(だってめんどくさいし...)。
                </TextBlock>
                <local:WinRTCodeButton Path="Pages/Data/Columns/Column20/source1.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock>
                    つぎに Xaml でタイトルバー部分を Xaml で作っていく。
                    以下のコードは MS の公式ページからコピペしたものをちょっといじくったもの。
                </TextBlock>
                <local:XamlCodeButton Path="Pages/Data/Columns/Column20/source2.txt"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock Text="タイトルバーの色を変える" Style="{StaticResource ColumnSubTitle}" />
                <TextBlock>
                    Xaml で作った AppTitiBar の Background プロパティをいじくることでタイトルバーを任意の色に変更できる。
                    以下の Xaml コードではタイトルバーの色をアクセントカラーにしている。
                </TextBlock>
                <local:XamlCodeButton Path="Pages/Data/Columns/Column20/source7.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock Text="タイトルバーの高さを変える" Style="{StaticResource ColumnSubTitle}" />
                <TextBlock>
                    拡張したタイトルバーの高さは 32 ピクセルになっているがこれを 48 ピクセルに変えることができる。
                    タイトルバーを高くする場合は MainWindow のコンストラクタに以下のコードを追加する。
                </TextBlock>
                <local:WinRTCodeButton Path="Pages/Data/Columns/Column20/source3.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock>
                    ついでに Xaml でタイトルバー部分の配置を変えておく。
                </TextBlock>
                <local:XamlCodeButton Path="Pages/Data/Columns/Column20/source4.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock Text="アプリ内でテーマを設定した場合の動作" Style="{StaticResource ColumnSubTitle}" />
                <TextBlock>
                    アプリ内でテーマを設定できる場合は注意が必要だ。
                    システムのテーマとアプリのテーマが異なる場合にキャプションボタンの色がおかしくなる。
                    キャプションボタンのテーマがシステムのテーマに追従するからだ。
                </TextBlock>
                <Image Source="../../../Pages/Data/Columns/Column20/image1.png" MaxWidth="497"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock>
                    これに対応するために追加のコードが必要になる。
                    まず、 Xaml で MainPanel に ActualThemeChanged イベントハンドラーを追加する。
                </TextBlock>
                <local:XamlCodeButton Path="Pages/Data/Columns/Column20/source5.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ColumnContentPanel>
                <TextBlock>
                    イベントハンドラーを追加したら C++ コードに以下の 3 つの関数を追加し、 MainWindow のコンストラクタと ActualThemeChanged で SetTitleBar を呼ぶようにする。
                    これでアプリテーマがシステムのテーマと異なる場合でもキャプションボタンが正しく表示される。
                </TextBlock>
                <local:WinRTCodeButton Path="Pages/Data/Columns/Column20/source6.txt" SaveButtonVisibilty="Collapsed"/>
            </local:ColumnContentPanel>

            <local:ResultsPanel>
                <TextBlock Style="{StaticResource Result}" />
                <local:ControlGrid Message="サンプリアプリを起動">
                    <Button x:Name="StartButton" Content="起動" Width="65" Click="StartButton_Click" />
                </local:ControlGrid>
            </local:ResultsPanel>

            <local:ColumnContentPanel>
                <TextBlock Text="参考ページ" Style="{StaticResource ColumnTitle}"/>
                <HyperlinkButton Content="https://learn.microsoft.com/ja-jp/windows/apps/develop/title-bar?tabs=wasdk" NavigateUri="https://learn.microsoft.com/ja-jp/windows/apps/develop/title-bar?tabs=wasdk" />
            </local:ColumnContentPanel>
            <TextBlock HorizontalAlignment="Right">
                    2023年5月25日<LineBreak/>
                    うりぼう
            </TextBlock>
        </local:ColumnOuterPanel>
    </ScrollViewer>
</Page>
